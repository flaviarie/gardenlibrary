-- Complete Library System Database Setup (Fixed Version)
-- Import this single file to set up everything

DROP DATABASE IF EXISTS library_system;
CREATE DATABASE library_system;
USE library_system;

-- Create Tables
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'student') NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE books (
    book_id VARCHAR(25) PRIMARY KEY,  -- Auto-generated format: THFEB102022-FIC00001
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    publish_date DATE,
    category VARCHAR(3) NOT NULL,     -- FIC, SCI, etc.
    added_date DATE NOT NULL,
    status ENUM('available', 'borrowed', 'archived') DEFAULT 'available',
    is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE borrowings (
    borrowing_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id VARCHAR(25) NOT NULL,  -- References books.book_id
    user_id INT NOT NULL,
    borrow_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE NULL,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE fines (
    fine_id INT AUTO_INCREMENT PRIMARY KEY,
    borrowing_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    status ENUM('unpaid', 'paid') DEFAULT 'unpaid',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    paid_at TIMESTAMP NULL,
    FOREIGN KEY (borrowing_id) REFERENCES borrowings(borrowing_id)
);

-- Create a trigger to auto-generate Book ID before insert
DELIMITER $$

CREATE TRIGGER generate_book_id 
BEFORE INSERT ON books 
FOR EACH ROW 
BEGIN
    DECLARE title_prefix VARCHAR(2);
    DECLARE publish_month VARCHAR(3);
    DECLARE added_day VARCHAR(2);
    DECLARE publish_year VARCHAR(4);
    DECLARE book_count INT;
    DECLARE formatted_count VARCHAR(5);
    
    -- 1. Get first 2 letters from title (letters only, uppercase)
    SET title_prefix = UPPER(LEFT(REGEXP_REPLACE(NEW.title, '[^A-Za-z]', ''), 2));
    
    -- 2. Get month from publish date (3 letters, uppercase)
    SET publish_month = UPPER(DATE_FORMAT(NEW.publish_date, '%b'));
    
    -- 3. Get day when added to system 
    SET added_day = LPAD(DAY(NEW.added_date), 2, '0');
    
    -- 4. Get year from publish date
    SET publish_year = YEAR(NEW.publish_date);
    
    -- 5. Get count of existing books + 1
    SELECT COUNT(*) + 1 INTO book_count FROM books WHERE is_deleted = FALSE;
    
    -- 6. Format count as 5-digit number
    SET formatted_count = LPAD(book_count, 5, '0');
    
    -- 7. Generate the Book ID: THFEB102022-FIC00001
    SET NEW.book_id = CONCAT(title_prefix, publish_month, added_day, publish_year, '-', UPPER(NEW.category), formatted_count);
    
END$$

DELIMITER ;

-- Insert Dummy Data

-- Insert Users (Students and Admin)
INSERT INTO users (username, password, role, email) VALUES
-- Admin Account
('admin', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 'admin@gardenlibrary.com'),
('librarian1', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 'librarian@gardenlibrary.com'),

-- Student Accounts (password is 'password' for all)
('john_doe', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'john.doe@student.edu'),
('jane_smith', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'jane.smith@student.edu'),
('mike_johnson', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'mike.johnson@student.edu'),
('sarah_wilson', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'sarah.wilson@student.edu'),
('david_brown', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'david.brown@student.edu'),
('lisa_garcia', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'lisa.garcia@student.edu'),
('tom_davis', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'tom.davis@student.edu'),
('emma_miller', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'emma.miller@student.edu'),
('alex_taylor', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'alex.taylor@student.edu'),
('maria_rodriguez', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'student', 'maria.rodriguez@student.edu');

-- Insert Books (Book ID will be AUTO-GENERATED by trigger)
-- Format: THFEB102022-FIC00001 (Title+Month+Day+Year+Category+Count)
INSERT INTO books (title, author, publish_date, category, added_date, status) VALUES
-- Fiction Books (FIC) - IDs will be auto-generated
('To Kill a Mockingbird', 'Harper Lee', '1960-07-11', 'FIC', '2022-02-10', 'available'),
('1984', 'George Orwell', '1949-06-08', 'FIC', '2022-02-10', 'borrowed'),
('Pride and Prejudice', 'Jane Austen', '1813-01-28', 'FIC', '2022-02-10', 'available'),
('The Great Gatsby', 'F. Scott Fitzgerald', '1925-04-10', 'FIC', '2022-02-10', 'available'),
('The Catcher in the Rye', 'J.D. Salinger', '1951-07-16', 'FIC', '2022-02-10', 'borrowed'),
('Lord of the Flies', 'William Golding', '1954-09-17', 'FIC', '2022-02-10', 'available'),
('The Hobbit', 'J.R.R. Tolkien', '1937-09-21', 'FIC', '2022-02-10', 'available'),
('Harry Potter and the Philosopher''s Stone', 'J.K. Rowling', '1997-06-26', 'FIC', '2022-02-10', 'borrowed'),

-- Science Books (SCI)
('A Brief History of Time', 'Stephen Hawking', '1988-04-01', 'SCI', '2022-02-10', 'available'),
('The Origin of Species', 'Charles Darwin', '1859-11-24', 'SCI', '2022-02-10', 'available'),
('Cosmos', 'Carl Sagan', '1980-09-28', 'SCI', '2022-02-10', 'borrowed'),
('The Selfish Gene', 'Richard Dawkins', '1976-01-01', 'SCI', '2022-02-10', 'available'),
('Silent Spring', 'Rachel Carson', '1962-09-27', 'SCI', '2022-02-10', 'available'),

-- History Books (HIS)
('Sapiens: A Brief History of Humankind', 'Yuval Noah Harari', '2011-01-01', 'HIS', '2022-02-10', 'available'),
('The Guns of August', 'Barbara Tuchman', '1962-01-01', 'HIS', '2022-02-10', 'available'),
('A People''s History of the United States', 'Howard Zinn', '1980-01-01', 'HIS', '2022-02-10', 'borrowed'),
('The Diary of a Young Girl', 'Anne Frank', '1947-06-25', 'HIS', '2022-02-10', 'available'),

-- Technology Books (TEC)
('Clean Code', 'Robert C. Martin', '2008-08-01', 'TEC', '2022-02-10', 'available'),
('The Pragmatic Programmer', 'David Thomas', '1999-10-20', 'TEC', '2022-02-10', 'borrowed'),
('Design Patterns', 'Gang of Four', '1994-10-21', 'TEC', '2022-02-10', 'available'),
('Introduction to Algorithms', 'Thomas H. Cormen', '1990-01-01', 'TEC', '2022-02-10', 'available'),

-- Philosophy Books (PHI)
('The Republic', 'Plato', '380-01-01', 'PHI', '2022-02-10', 'available'),
('Meditations', 'Marcus Aurelius', '180-01-01', 'PHI', '2022-02-10', 'available'),
('The Art of War', 'Sun Tzu', '500-01-01', 'PHI', '2022-02-10', 'borrowed');

-- Insert Borrowings (using the auto-generated book IDs)
-- Note: We'll use the actual generated book_id values
INSERT INTO borrowings (book_id, user_id, borrow_date, due_date, return_date) VALUES
-- Active Borrowings (not returned yet) - Using actual generated Book IDs
((SELECT book_id FROM books WHERE title = '1984'), 3, '2024-12-01', '2024-12-15', NULL),
((SELECT book_id FROM books WHERE title = 'The Catcher in the Rye'), 4, '2024-12-05', '2024-12-19', NULL),
((SELECT book_id FROM books WHERE title = 'Harry Potter and the Philosopher''s Stone'), 5, '2024-12-10', '2024-12-24', NULL),
((SELECT book_id FROM books WHERE title = 'Cosmos'), 6, '2024-12-08', '2024-12-22', NULL),
((SELECT book_id FROM books WHERE title = 'A People''s History of the United States'), 7, '2024-12-12', '2024-12-26', NULL),
((SELECT book_id FROM books WHERE title = 'The Pragmatic Programmer'), 8, '2024-12-03', '2024-12-17', NULL),
((SELECT book_id FROM books WHERE title = 'The Art of War'), 9, '2024-12-07', '2024-12-21', NULL),

-- Returned Borrowings
((SELECT book_id FROM books WHERE title = 'To Kill a Mockingbird'), 3, '2024-11-01', '2024-11-15', '2024-11-14'),
((SELECT book_id FROM books WHERE title = 'Pride and Prejudice'), 4, '2024-11-05', '2024-11-19', '2024-11-18'),
((SELECT book_id FROM books WHERE title = 'A Brief History of Time'), 5, '2024-11-10', '2024-11-24', '2024-11-22'),
((SELECT book_id FROM books WHERE title = 'Sapiens: A Brief History of Humankind'), 6, '2024-11-15', '2024-11-29', '2024-11-28'),
((SELECT book_id FROM books WHERE title = 'Clean Code'), 7, '2024-11-20', '2024-12-04', '2024-12-03'),

-- Overdue Returns (late returns)
((SELECT book_id FROM books WHERE title = 'The Great Gatsby'), 8, '2024-10-01', '2024-10-15', '2024-10-20'),
((SELECT book_id FROM books WHERE title = 'The Origin of Species'), 9, '2024-10-05', '2024-10-19', '2024-10-25'),
((SELECT book_id FROM books WHERE title = 'The Guns of August'), 10, '2024-10-10', '2024-10-24', '2024-10-30');

-- Insert Fines (for overdue books)
INSERT INTO fines (borrowing_id, amount, status, paid_at) VALUES
-- Paid fines
(13, 5.00, 'paid', '2024-10-21'),
(14, 7.50, 'paid', '2024-10-26'),

-- Unpaid fine
(15, 10.00, 'unpaid', NULL);

-- Insert some recent borrowings that are overdue (for testing overdue functionality)
INSERT INTO borrowings (book_id, user_id, borrow_date, due_date, return_date) VALUES
((SELECT book_id FROM books WHERE title = 'Lord of the Flies'), 11, '2024-11-01', '2024-11-15', NULL),  -- Overdue
((SELECT book_id FROM books WHERE title = 'The Selfish Gene'), 12, '2024-11-05', '2024-11-19', NULL);   -- Overdue

-- Add fines for the overdue books
INSERT INTO fines (borrowing_id, amount, status) VALUES
(16, 12.50, 'unpaid'),  -- Fine for overdue Lord of the Flies
(17, 8.75, 'unpaid');   -- Fine for overdue The Selfish Gene

-- Display success message
SELECT 'Database setup complete! You can now login with username: admin, password: password' AS 'Setup Status';
